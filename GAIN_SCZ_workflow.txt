Pre-QC for GAIN_SCZ

Original data:

File stem: phg000013.filtered.GRU.plink.update1 (GRU); phg000013.filtered.SARC.plink (SARC)
Array: Affy 6.0
Genome build: b36 (hg18)
SNP IDs: Affy IDs
Allele coding: A/T/C/G
X coding: chr23

Want to be able to check data quality with Kaixiong's check_genome_build_and_strange_alignment.pl,
which requires that all SNPs be on + strand, and have rsIDs

Can convert strand to + using Wrayner's script and data, but only has data for this platform in hg19 coordinates (GenomeWide_6-b37.58-v2.strand)

Easiest to...
1st: Convert orignial data to hg19 coordinates with liftOver
2nd: Convert all SNPs to + strand with update_build.sh and strand file
3rd: Convert Affy SNP IDs to hg19 rsIDs using array annotation file and plink
4th: Check concordance with check_genome_build_and_strange_alignment.pl
5th: Run XWAS QC


Step #1: Merge the GRU and SARC cohorts into a single binary data set:
	$ ../../plink-1.07-x86_64/plink --noweb --bfile phg000013.filtered.GRU.plink.update1 --bmerge phg000013.filtered.SARC.plink.bed phg000013.filtered.SARC.plink.bim phg000013.filtered.SARC.plink.fam --make-bed --out GAIN_SCZ_merge
	--> GAIN_SCZ_merge.bed, .bim, .fam

Step #2: Format merged data for input to liftOver:
	a. Generate new non-binary files from the merged data:
	$ ../../plink-1.07-x86_64/plink --noweb --bfile GAIN_SCZ_merge --recode --out GAIN_SCZ_merge
	--> GAIN_SCZ_merge.ped, .map

	b. Add 'chr' to chromosome column of .map file, add a new column with 1-based position-1,
	and rearrange the columns into a .bed file of the correct format for liftOver:
	$ awk '{$0="chr"$0}{print $1,($4-1),$4,$2}' GAIN_SCZ_merge.map > liftOver_input.bed
	--> liftOver_input.bed

	c. Change chr23 to chrX (or all X SNPs will be filtered out by liftOver):
	$ awk '{if ($1=="chr23")sub($1,"chrX"); print $0}' liftOver_input.bed > liftOver_inputX.bed
	--> liftOver_inputX.bed

Step #3: Run liftOver:
	$ ../liftOver liftOver_inputX.bed ../hg18ToHg19.over.chain.gz GAIN_SCZ_hg19.bed GAIN_SCZ_hg19_unlifted.txt
	--> GAIN_SCZ_hg19.bed, GAIN_SCZ_hg19_unlifted.txt

Step #4: Convert lifted .bed file back to .map file format:
	$ awk '{print substr($1,4), $4, "0", $2}' GAIN_SCZ_hg19.bed > GAIN_SCZ_hg19.map
	--> GAIN_SCZ_hg19.map

Step #5: Generate a new binary data set with hg19 coordinates and unlifted SNPs removed:
	a. Use plink to exclude all unlifted hg18 SNPs from the .ped file generated in step 2a:
	$ ../../plink-1.07-x86_64/plink --noweb --file GAIN_SCZ_merge --exclude GAIN_SCZ_hg19_unlifted.txt --recode --out GAIN_SCZ_merge_filtered
	--> GAIN_SCZ_merge_filtered.ped, .map

	b. Rename the filtered .ped file to match the hg19 .map file generated in step 4:
	$ mv GAIN_SCZ_merge_filtered.ped GAIN_SCZ_hg19.ped
	--> GAIN_SCZ_hg19.ped

	c. Recode as binary files:	
	$ ../../plink-1.07-x86_64/plink --noweb --file GAIN_SCZ_hg19 --make-bed --out GAIN_SCZ_hg19
	--> GAIN_SCZ_hg19.bed, .bim, .fam

Step #6: Use update_build.sh to generate a new file stem with all SNPs converted to + strand; make sure plink dir is in path
	(GenomeWide_6-b37.58-v2.strand and update_build.sh from http://www.well.ox.ac.uk/~wrayner/strand/):
	$ ../bin/update_build.sh GAIN_SCZ_hg19 GenomeWide_6-b37.58-v2.strand GAIN_SCZ_hg19_pstrand
	--> GAIN_SCZ_hg19_pstrand.bed, .bim, .fam

Step #7: Recode SNP IDs to rsIDs:
	a. Generate list of rsIDs for each Affy SNP ID with recode_IDs.py and the Affy array annotation file
	(from http://www.affymetrix.com/estore/catalog/131533/AFFY/Genome-Wide+Human+SNP+Array+6.0#1_3):
	$ python ../recode_IDs.py GAIN_SCZ_hg19_pstrand.bim GenomeWideSNP_6.na35.annot.csv hg19_AffyID_rsID remove_rsID
	--> hg19_AffyID_rsID.txt, remove_rsID.txt

	*** remove_rsID.txt contains duplicate rsIDs - figure out what's happening with them:
		found one: rs1462062 (maps to SNP_A-8388040 and SNP_A-8387337, which have identical position/alleles)
	
	b. Generate new binary files with all Affy SNP IDs converted to rsIDs (and remove duplicate SNPs):
	$ ../../plink-1.07-x86_64/plink --noweb --bfile GAIN_SCZ_hg19_pstrand --update-map hg19_AffyID_rsID.txt --update-name --exclude remove_rsID.txt --make-bed --out GAIN_SCZ_hg19_pstrand_recoded
	--> GAIN_SCZ_hg19_pstrand_recoded.bed, .bim, .fam

Step #8: Check allele concordance using Kaixiong's check_genome_build_and_strange_alignment.pl (all metrics should be ~95%):
	a. chr22:
	$ perl ../bin/check_genome_build_and_strange_alignment.pl GAIN_SCZ_hg19_pstrand_recoded.bim ../bin/reference_files/chr22.hg19.legend GAIN_SCZ_strandcheck_hg19_22.txt
	--> GAIN_SCZ_GRU_strandcheck_hg19_22.txt

	b. chrX:
	$ perl ../bin/check_genome_build_and_strange_alignment.pl GAIN_SCZ_hg19_pstrand_recoded.bim ../bin/reference_files/chrX.hg19.legend GAIN_SCZ_strandcheck_hg19_X.txt
	--> GAIN_SCZ_GRU_strandcheck_hg19_X.txt

Step #9: In a new subdirectory, make new parameter file with correct file stem, copy the .bed/bim/fam files produced in step 7b into it, and run XWAS QC script:
	$ ../../bin/run_QC.sh GAIN_params_qc.txt
	--> GAIN_SCZ_hg19_filtered_pstrand.preprocessed_final_x.*

-----------------------------------------------------------------------------------

Imputation for GAIN_SCZ

Step #1: Create new binary files with only chr23 to use as input for imputation:
	$ ../../../plink-1.07-x86_64/plink --bfile GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_x --chr 23 --make-bed --noweb --out GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X
	--> GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X.ped, .map

Step #2: Put files needed for imputation in a new directory on the cluster:
 	a. On local machine:
	$ mkdir IMPUTATION
	$ cp GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X.*  ./IMPUTATION
	$ scp -r ./IMPUTATION ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ

	b. On cluster /home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION:
	$ cp /home/ak735_0001/imputation/make_imputation_files.py ./
	$ cp /home/ak735_0001/imputation/MS_imputation.txt ./
	$ mkdir processed
	$ mkdir imputed
	$ mkdir final

	c. Edit configuration file (only change starred items):

	-->	*FILE: GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X
		*OUTPUT: GAIN_SCZ_X_imputed
		NJOBS: 31
		BUILD: 19
		FILTER: EUR.MAF<=0.005
		*FILELOC: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION/
		REFLOC: /home/ak735_0001/impute2_reference_files/
		TOOLSLOC: /home/ak735_0001/imputation_tools/
		*RESLOC1: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION/processed/
		*RESLOC2: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION/imputed/
		*FINALRESLOC: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION/final/

Step #3: Generate shell scripts for imputation of 31 chromosome chunks (still in /home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION/):
	$ python make_imputation_files.py MS_imputation.txt
	-> GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_impute2_run_all.sh, GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_preimpute.sh, GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_impute2_cat.sh, GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_impute2_run_*.sh, 

Step #4: Run the preimpute script (reformats the files for impute2):
	$ qsub GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_preimpute.sh
	--> GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_preimpute.out.(job ID)

Step #5: Run script to submit all chunks to the cluster job queue for imputation:
	$ sh *run_all.sh
	--> GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X.impute2.*

Step #6: Rerun any jobs that failed (e.g. status changed to Eqw)
	$ qsub GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_impute2_run_(chunk).sh

Step #7: Check the imputation output for error messages:
	$ perl /home/ak735_0001/imputation_tools/check_step2_run_status.pl GAIN_SCZ_hg19_pstrand_recoded.preprocessed_final_X_impute2_run.out
	--> Prints MCMC iteration status and/or any error messages in the output files from step #5/6 (if nothing prints, no errors)

Step #8: Once imputation is complete, concatenate the imputed chunks:
	$ qsub *_cat.sh
	--> GAIN_SCZ_X_imputed.bed, .bim, .fam, .log


-----------------------------------------------------------------------------------

Post-imputation QC for GAIN_SCZ

Step #1: Get imputed data off cluster and on to local machine:
	a. Make new directory on local machine and cd into it
	$ mkdir Imputed_data, 
	$ cd Imputed_data

	b. Copy final imputation output to local machine:
	$ scp -r ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION/final/GAIN_SCZ_X_imputed.* ./

	c. Check log file for errors:
	$ cat GAIN_SCZ_X_imputed.log

Step #2: Make new parameter file with correct file stem (same as pre-QC parameter file) and run the post-imputation QC script:
	$ ../../bin/xwas_qc.post_imputation.sh GAIN_params_qc.txt
	--> GAIN_SCZ_X_imputed_final_x.bed, .bim, .fam., .log


-----------------------------------------------------------------------------------

Running XWAS for AJ_SCZ

Step #1: Copy final QC'd, imputed files into a new directory on the cluster:
	a. Make new directory on local machine and cd into it
	$ mkdir run_XWAS
	$ cp GAIN_SCZ_X_imputed_final_x*  ./run_XWAS
	$ scp -r ./run_XWAS ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/
	
Step #2: On the cluster (/home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/run_XWAS), run XWAS tests:
	a. Sex-stratified (Fisher's method):
	$ /home/ak735_0001/XWAS/bin/xwas --bfile GAIN_SCZ_X_imputed_final_x --xwas --strat-sex --fishers --out xwas.xstrat.logistic.fishers
	--> xwas.xstrat.logistic.fishers_fisher_temp.txt, xwas.xstrat.logistic.fishers.log, xwas.xstrat.logistic.fishers.xstrat.logistic
	
	b. Sex-stratified (Stouffer's method):
	$ /home/ak735_0001/XWAS/bin/xwas --bfile GAIN_SCZ_X_imputed_final_x --xwas --strat-sex --stouffers --out xwas.xstrat.logistic.stouffers
	--> xwas.xstrat.logistic.stouffers.log, xwas.xstrat.logistic.stouffers_stouffer_temp.txt, xwas.xstrat.logistic.stouffers.xstrat.logistic

	c. Combined sexes, 0/1 male coding:
	$ /home/ak735_0001/XWAS/bin/xwas --bfile GAIN_SCZ_X_imputed_final_x --xchr-model 1 --linear --out xwas.male1
	--> xwas.male1.assoc.logistic, xwas.male1.log

	d. Combined sexes, 0/2 male coding:
	$ /home/ak735_0001/XWAS/bin/xwas --bfile GAIN_SCZ_X_imputed_final_x --xchr-model 2 --linear --out xwas.male2
	--> xwas.male2.assoc.logistic, xwas.male2.log

	e. Females only:
	$ /home/ak735_0001/XWAS/bin/xwas --bfile GAIN_SCZ_X_imputed_final_x --xchr-model 2 --linear --filter-females --out xwas.female_only
	--> xwas.female_only.assoc.logistic, xwas.female_only.log

	f. Males only (0/2 males coding):
	$ /home/ak735_0001/XWAS/bin/xwas --bfile GAIN_SCZ_X_imputed_final_x --xchr-model 2 --linear --filter-males --out xwas.male_only
	--> xwas.male_only.assoc.logistic, xwas.male_only.log

Step #3: Copy XWAS output to local machine:
	$ scp -r ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/run_XWAS/xwas.* ./

Step #4: Generate QQ and manahttan plots for each association test:
	$ Rscript ../../../qqman.R xwas.assoc.logistic.male1.assoc.logistic male01
	
	$ Rscript ../../../qqman.R xwas.assoc.logistic.male2.assoc.logistic male02
	
	$ Rscript ../../../qqman.R xwas.xstrat.logistic.fishers.xstrat.logistic sex_strat.fishers 	* won't work for these - doesn't recognize column header for combined p-val

	$ Rscript ../../../qqman.R xwas.xstrat.logistic.stouffers.xstrat.logistic sex_strat.stouffers

-----------------------------------------------------------------------------------

Running gene-based XWAS for AJ_SCZ

Step #1: Get files needed for gene based test into a new directory on local machine:
	a. Make new directory and cd into it:
	$ mkdir /home/ajs592/Downloads/XWAS_v1.1/GAIN_SCZ/Imputed_data/run_gene_XWAS
	$ cd run_gene_XWAS

	b. Copy plink files, gene test parameter file, and p-value files into this directory:
	$ cp /home/ajs592/Downloads/XWAS_v1.1/example/gene_automated/example_params_gene_test_auto.txt ./
	$ cp /home/ajs592/Downloads/XWAS_v1.1/GAIN_SCZ/Imputed_data/GAIN_SCZ_X_imputed_final_x* ./
	$ cp /home/ajs592/Downloads/XWAS_v1.1/GAIN_SCZ/Imputed_data/run_XWAS/*_temp.txt ./

	c. Edit the param file:
		filename	GAIN_SCZ_X_imputed_final_x
		xwasloc	../../../bin/
		genescriptloc	../../../bin/
		genelistname	../../../knownCanonical.chrX.hg19.txt
		pvfolder	./
		buffer	15000
	
	--> save as params_gene_test_auto.txt

Step #2: Run gene-based test:
	$ ../../../bin/gene_based_test_automate.sh params_gene_test_auto.txt
	--> *_gene.txt.sort





