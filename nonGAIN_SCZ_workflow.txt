Pre-QC for nonGAIN_SCZ

Original data:

File stem: nonGAIN_Schizophrenia_consent_GRU
Array: Affy 6.0
Genome build: 36.3 (hg18)
SNP IDs: Affy ID
Allele coding: A/T/G/C
X coding: chr23

Step #1: Recode phenotypes from 0 to 1/2 (control/case):
	a. Make intermediate file:
	$ python ../recode_phenotype.py nonGAIN_Schizophrenia_consent_GRU.fam phs000167.v1.pht000717.v1.p1.nonGAIN_Schizophrenia_Subject.MULTI.txt nonGAIN_SCZ_recode_phen
	--> nonGAIN_SCZ_recode_phen.txt

	b. Convert phenotypes:
	$ ../../plink-1.07-x86_64/plink --noweb --bfile nonGAIN_Schizophrenia_consent_GRU --pheno nonGAIN_SCZ_recode_phen.txt --make-bed --out nonGAIN_recoded1
	--> nonGAIN_recoded1.bed, .bim, .fam

	c. Explicitly code phenotypes as binary (1=control, 2=case), or they'll be read as quantitative:
	$ ../../plink-1.07-x86_64/plink --noweb --bfile nonGAIN_recoded1 --make-pheno nonGAIN_SCZ_recode_phen.txt 2 --make-bed --out nonGAIN_recoded2
	--> nonGAIN_recoded2.bed, .bim, .fam

Step #2: Format data for input to liftOver:
	a. Generate new non-binary files from the merged data:
	$ ../../plink-1.07-x86_64/plink --noweb --bfile nonGAIN_recoded2 --recode --out nonGAIN_recoded
	--> nonGAIN_recoded.ped, .map

	b. Add 'chr' to chromosome column of .map file, add a new column with 1-based position-1,
	and rearrange the columns into a .bed file of the correct format for liftOver:
	$ awk '{$0="chr"$0}{print $1,($4-1),$4,$2}' nonGAIN_recoded.map > liftOver_input.bed
	--> liftOver_input.bed

	c. Change chr23 to chrX (or all X SNPs will be filtered out by liftOver):
	$ awk '{if ($1=="chr23")sub($1,"chrX"); print $0}' liftOver_input.bed > liftOver_inputX.bed
	--> liftOver_inputX.bed

Step #3: Run liftOver:
	$ ../liftOver liftOver_inputX.bed ../hg18ToHg19.over.chain.gz nonGAIN_recoded_hg19.bed nonGAIN_recoded_hg19_unlifted.txt
	--> nonGAIN_recoded_hg19.bed, nonGAIN_recoded_hg19_unlifted.txt

Step #4: Convert lifted .bed file back to .map file format:
	$ awk '{print substr($1,4), $4, "0", $2}' nonGAIN_recoded_hg19.bed > nonGAIN_recoded_hg19.map
	--> nonGAIN_recoded_hg19.map

Step #5: a. Use plink to exclude all unlifted hg18 SNPs from the .ped file generated in step 2a:
	$ ../../plink-1.07-x86_64/plink --noweb --file nonGAIN_recoded --exclude nonGAIN_recoded_hg19_unlifted.txt --recode --out nonGAIN_recoded_hg19_filtered
	--> nonGAIN_recoded_hg19_filtered.ped, .map
	
	b. Rename the filtered .ped file to match the hg19 .map file generated in step 4:
	$ mv nonGAIN_recoded_hg19_filtered.ped nonGAIN_recoded_hg19.ped
	--> nonGAIN_recoded_hg19.ped

	c. Recode as binary files:	
	$ ../../plink-1.07-x86_64/plink --noweb --file nonGAIN_recoded_hg19 --make-bed --out nonGAIN_recoded_hg19
	--> nonGAIN_recoded_hg19.bed, .bim, .fam

Step #6: Use update_build.sh to generate a new file stem with all SNPs converted to + strand; make sure plink dir is in path
	(GenomeWide_6-b37.58-v2.strand and update_build.sh from http://www.well.ox.ac.uk/~wrayner/strand/):
	$ ../bin/update_build.sh nonGAIN_recoded_hg19 GenomeWide_6-b37.58-v2.strand nonGAIN_recoded_hg19_pstrand
	--> nonGAIN_recoded_hg19_pstrand.bed, .bim, .fam

Step #7: Recode SNP IDs to rsIDs:
	a. Generate list of rsIDs for each Affy SNP ID with recode_IDs.py and the Affy array annotation file
	(from http://www.affymetrix.com/estore/catalog/131533/AFFY/Genome-Wide+Human+SNP+Array+6.0#1_3):
	$ python ../recode_IDs.py nonGAIN_recoded_hg19_pstrand.bim GenomeWideSNP_6.na35.annot.csv hg19_AffyID_rsID remove_rsID
	--> hg19_AffyID_rsID.txt, remove_rsID.txt

	*** remove_rsID.txt contains duplicate rsIDs - figure out what's happening with them:
		Many SNPs have 2 entries, but none have more than 2.
		These seem to be cases where there's one entry with the "SNP_A" suffix and one with the "AFFX" suffix (e.g. rs7420360 maps to SNP_A-2236865 and AFFX-SNP_8809312)
	
	b. Generate new binary files with all Affy SNP IDs converted to rsIDs (and remove duplicate SNPs):
	$ ../../plink-1.07-x86_64/plink --noweb --bfile nonGAIN_recoded_hg19_pstrand --update-map hg19_AffyID_rsID.txt --update-name --exclude remove_rsID.txt --make-bed --out nonGAIN_recoded_hg19_pstrand_rs


Step #8: Check allele concordance using Kaixiong's check_genome_build_and_strange_alignment.pl (all metrics should be ~95%):
	a. chr22:
	$ perl ../bin/check_genome_build_and_strange_alignment.pl nonGAIN_recoded_hg19_pstrand_rs.bim ../bin/reference_files/chr22.hg19.legend nonGAIN_strandcheck_hg19_22.txt
	--> nonGAIN_strandcheck_hg19_22.txt

	b. chrX:
	$ perl ../bin/check_genome_build_and_strange_alignment.pl nonGAIN_recoded_hg19_pstrand_rs.bim ../bin/reference_files/chrX.hg19.legend nonGAIN_strandcheck_hg19_X.txt
	--> nonGAIN_strandcheck_hg19_X.txt

Step #9: In a new subdirectory, make new parameter file with correct file stem, copy the .bed/bim/fam files produced in step 7b into it, and run XWAS QC script:
	$ ../../bin/run_QC.sh nonGAIN_params_qc.txt
	--> nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_x.*

-----------------------------------------------------------------------------------

Imputation for nonGAIN_SCZ

Step #1: Create new binary files with only chr23 to use as input for imputation:
	$ ../../../plink-1.07-x86_64/plink --bfile nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_x --chr 23 --make-bed --noweb --out nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X
	--> nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X.bed, .bim, .fam

Step #2: Put files needed for imputation in a new directory on the cluster:
 	a. On local machine:
	$ mkdir IMPUTATION
	$ cp nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X.*  ./IMPUTATION
	$ scp -r ./IMPUTATION ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ

	b. On cluster /home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/IMPUTATION/:
	$ cp /home/ak735_0001/imputation/make_imputation_files.py ./
	$ cp /home/ak735_0001/imputation/MS_imputation.txt ./
	$ mkdir processed
	$ mkdir imputed
	$ mkdir final

c. Edit configuration file (only change starred items):

	-->	*FILE: nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X
		*OUTPUT: nonGAIN_SCZ_X_imputed
		NJOBS: 31
		BUILD: 19
		FILTER: EUR.MAF<=0.005
		*FILELOC: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/IMPUTATION2/
		REFLOC: /home/ak735_0001/impute2_reference_files/
		TOOLSLOC: /home/ak735_0001/imputation_tools/
		*RESLOC1: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/IMPUTATION2/processed/
		*RESLOC2: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/IMPUTATION2/imputed/
		*FINALRESLOC: /home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/IMPUTATION2/final/

Step #3: Generate shell scripts for imputation of 31 chromosome chunks (still in/home/ak735_0001/data/XWAS/dbGaP-2813/DAR15042_GAIN_SCZ/IMPUTATION/):
	$ python make_imputation_files.py MS_imputation.txt
	-> nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_impute2_run_all.sh, nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_preimpute.sh, nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_impute2_cat.sh, nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_impute2_run*.sh, 

Step #4: Run the preimpute script (reformats the files for impute2):
	$ qsub nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_preimpute.sh
	--> nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_preimpute.out(job ID)

Step #5: Run script to submit all chunks to the cluster job queue for imputation:
	$ sh *run_all.sh
	--> nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_impute2_run.out.*

Step #6: Rerun any jobs that failed (e.g. status changed to Eqw)
	$ qsub nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_impute2_run(chunk).sh

Step #7: Check the imputation output for error messages:
	$ perl /home/ak735_0001/imputation_tools/check_step2_run_status.pl nonGAIN_recoded_hg19_pstrand_rs.preprocessed_final_X_impute2_run.out
	--> Prints MCMC iteration status and/or any error messages in the output files from step #5/6 (if nothing prints, no errors)

Step #8: Once imputation is complete, concatenate the imputed chunks:
	$ qsub *_cat.sh
	--> nonGAIN_SCZ_X_imputed.bed, .bim, .fam, .log (in /final)


-----------------------------------------------------------------------------------

Post-imputation QC for nonGAIN_SCZ

Step #1: Get imputed data off cluster and on to local machine:
	a. Make new directory on local machine and cd into it
	$ mkdir Imputed_data, 
	$ cd Imputed_data

	b. Copy final imputation output to local machine:
	$ scp -r ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/IMPUTATION/final/nonGAIN_SCZ_X_imputed.* ./

	c. Check log file for errors:
	$ cat nonGAIN_SCZ_X_imputed.log

Step #2: Make new parameter file with correct file stem (same as pre-QC parameter file) and run the post-imputation QC script:
	$ ../../bin/xwas_qc.post_imputation.sh nonGAIN_params_qc.txt

-----------------------------------------------------------------------------------

Running XWAS for nonGAIN_SCZ

Step #1: Copy final QC'd, imputed files into a new directory on the cluster:
	a. Make new directory on local machine and cd into it
	$ mkdir run_XWAS
	$ cp nonGAIN_SCZ_X_imputed_final_x.*  ./run_XWAS
	$ scp -r ./run_XWAS ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/

Step #2: On the cluster (/home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/run_XWAS), run XWAS tests:
	a. Sex-stratified (Fisher's method):
	$ /home/ak735_0001/XWAS/bin/xwas --bfile nonGAIN_SCZ_X_imputed_final_x --xwas --strat-sex --fishers --out xwas.fisher
	--> xwas.fisher_fisher_temp.txt, xwas.fisher.log, xwas.fisher.xstrat.logistic
	
	b. Sex-stratified (Stouffer's method):
	$ /home/ak735_0001/XWAS/bin/xwas --bfile nonGAIN_SCZ_X_imputed_final_x --xwas --strat-sex --stouffers --out xwas.stouffer
	--> xwas.stouffer_stouffer_temp.txt, xwas.stouffer.log, xwas.stouffer.xstrat.logistic

	c. Combined sexes, 0/1 male coding:
	$ /home/ak735_0001/XWAS/bin/xwas --bfile nonGAIN_SCZ_X_imputed_final_x --xchr-model 1 --linear --out xwas.male1
	--> xwas.male1.assoc.logistic, xwas.male1.log

	d. Combined sexes, 0/2 male coding:
	$ /home/ak735_0001/XWAS/bin/xwas --bfile nonGAIN_SCZ_X_imputed_final_x --xchr-model 2 --linear --out xwas.male2
	--> xwas.male2.assoc.logistic, xwas.male2.log

	e. Females only:
	$ /home/ak735_0001/XWAS/bin/xwas --bfile nonGAIN_SCZ_X_imputed_final_x --xchr-model 2 --linear --filter-females --out xwas.female_only
	--> xwas.female_only.assoc.logistic, xwas.female_only.log

	f. Males only (0/2 males coding):
	$ /home/ak735_0001/XWAS/bin/xwas --bfile nonGAIN_SCZ_X_imputed_final_x --xchr-model 2 --linear --filter-males --out xwas.male_only
	--> xwas.male_only.assoc.logistic, xwas.male_only.log


Step #3: Copy XWAS output to local machine:
	$ scp -r ajs592@cbsulogin.tc.cornell.edu:/home/ak735_0001/data/XWAS/dbGaP-2813/DAR37460_JAAMH_SCZ/run_XWAS/xwas.* ./


